from entpy import Pattern, Schema
from entpy.gencode.utils import get_description, to_snake_case


def generate(
    pattern_class: type[Pattern],
    children_schema_classes: list[type[Schema]],
    vc_import: str,
    vc_name: str,
) -> str:
    pattern = pattern_class()
    base_name = pattern_class.__name__.replace("Pattern", "")

    # Let's make sure that we require the properties for the pattern fields
    properties = ""
    for field in pattern.get_sorted_fields():
        properties += f"""
    @property
    @abstractmethod
    def {field.name}(self) -> {field.get_python_type()}:
        pass
"""

    # We are trying to load the various subclasses of ents
    loaders_gen = _get_loaders(
        required=False, children_schema_classes=children_schema_classes
    )
    loaders_genx = _get_loaders(
        required=True, children_schema_classes=children_schema_classes
    )

    return f"""####################
# Code generated by EntPy - do not modify manually!
####################

from __future__ import annotations
from abc import ABC, abstractmethod
from uuid import UUID
{vc_import}

class I{base_name}(ABC):{get_description(pattern)}
    {properties}

    @classmethod
    async def gen(cls, vc: {vc_name}, ent_id: UUID) -> I{base_name} | None:
        # TODO refactor this to read the bytes from the UUID
        {loaders_gen}
        return None

    @classmethod
    async def genx(cls, vc: {vc_name}, ent_id: UUID) -> I{base_name}:
        # TODO refactor this to read the bytes from the UUID
        {loaders_genx}
        raise ValueError(f"No {base_name} found for ID {{ent_id}}")
"""


def _get_loaders(required: bool, children_schema_classes: list[type[Schema]]) -> str:
    loaders = ""
    for schema_class in children_schema_classes:
        schema_base_name = schema_class.__name__.replace("Schema", "")
        lower_schema = to_snake_case(schema_base_name)
        loaders += f"""
        from .{lower_schema} import {schema_base_name}
        {lower_schema} = await {schema_base_name}.gen{"x" if required else ""}(vc, ent_id)
        if {lower_schema}:
            return {lower_schema}
"""
    return loaders
