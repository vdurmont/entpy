####################
# Code generated by EntPy - do not modify manually!
####################

from __future__ import annotations
from entpy import Ent, generate_uuid, EntNotFoundError, ExecutionError, Action, Decision
from uuid import UUID
from datetime import datetime, UTC
from typing import Self
from abc import ABC
from evc import ExampleViewerContext
from database import get_session
from .ent_model import EntModel
from sqlalchemy import select, Select, func
from sentinels import NOTHING, Sentinel  # type: ignore
from ent_parent_schema import EntParentSchema
from typing import Any, TypeVar, Generic
from .ent_grand_parent import EntGrandParent
from sqlalchemy.dialects.postgresql import UUID as DBUUID
from sqlalchemy import ForeignKey
from entpy import Field
from .ent_grand_parent import EntGrandParentExample
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy.sql.expression import ColumnElement
from sqlalchemy import String


class EntParentModel(EntModel):
    __tablename__ = "parent"

    grand_parent_id: Mapped[UUID] = mapped_column(
        DBUUID(as_uuid=True), ForeignKey("grand_parent.id"), nullable=False
    )
    name: Mapped[str] = mapped_column(String(100), nullable=False)


class EntParent(Ent):
    vc: ExampleViewerContext
    model: EntParentModel

    def __init__(self, vc: ExampleViewerContext, model: EntParentModel) -> None:
        self.vc = vc
        self.model = model

    @property
    def id(self) -> UUID:
        return self.model.id

    @property
    def created_at(self) -> datetime:
        return self.model.created_at

    @property
    def updated_at(self) -> datetime:
        return self.model.updated_at

    @property
    def grand_parent_id(self) -> UUID:
        return self.model.grand_parent_id

    async def gen_grand_parent(self) -> EntGrandParent:
        return await EntGrandParent.genx(self.vc, self.model.grand_parent_id)

    @property
    def name(self) -> str:
        return self.model.name

    async def _gen_evaluate_privacy(
        self, vc: ExampleViewerContext, action: Action
    ) -> Decision:
        rules = EntParentSchema().get_privacy_rules(action)
        for rule in rules:
            decision = await rule.gen_evaluate(vc, self)
            # If we get an ALLOW or DENY, we return instantly. Else, we keep going.
            if decision != Decision.PASS:
                return decision
        # We default to denying
        return Decision.DENY

    @classmethod
    async def genx(cls, vc: ExampleViewerContext, ent_id: UUID) -> EntParent:
        ent = await cls.gen(vc, ent_id)
        if not ent:
            raise EntNotFoundError(f"No EntParent found for ID {ent_id}")
        return ent

    @classmethod
    async def gen(cls, vc: ExampleViewerContext, ent_id: UUID) -> EntParent | None:
        session = get_session()
        model = await session.get(EntParentModel, ent_id)
        return await cls._gen_from_model(vc, model)

    @classmethod
    async def _gen_from_model(
        cls, vc: ExampleViewerContext, model: EntParentModel | None
    ) -> EntParent | None:
        if not model:
            return None
        ent = EntParent(vc=vc, model=model)
        decision = await ent._gen_evaluate_privacy(vc=vc, action=Action.READ)
        return ent if decision == Decision.ALLOW else None

    @classmethod
    async def _genx_from_model(
        cls, vc: ExampleViewerContext, model: EntParentModel
    ) -> EntParent:
        ent = await EntParent._gen_from_model(vc=vc, model=model)
        if not ent:
            raise EntNotFoundError(f"No EntParent found for ID {model.id}")
        return ent

    @classmethod
    def query(cls, vc: ExampleViewerContext) -> EntParentListQuery:
        return EntParentListQuery(vc=vc)

    @classmethod
    def query_count(cls, vc: ExampleViewerContext) -> EntParentCountQuery:
        return EntParentCountQuery()


T = TypeVar("T")


class EntParentQuery(ABC, Generic[T]):
    query: Select[tuple[T]]

    def join(self, model_class: type[EntModel], predicate: ColumnElement[bool]) -> Self:
        self.query = self.query.join(model_class, predicate)
        return self

    def where(self, predicate: ColumnElement[bool]) -> Self:
        self.query = self.query.where(predicate)
        return self

    def order_by(self, predicate: ColumnElement[Any]) -> Self:
        self.query = self.query.order_by(predicate)
        return self

    def limit(self, limit: int) -> Self:
        self.query = self.query.limit(limit)
        return self


class EntParentListQuery(EntParentQuery[EntParentModel]):
    vc: ExampleViewerContext

    def __init__(self, vc: ExampleViewerContext) -> None:
        self.vc = vc
        self.query = select(EntParentModel)

    async def gen(self) -> list[EntParent]:
        session = get_session()
        result = await session.execute(self.query)
        models = result.scalars().all()
        ents = [await EntParent._gen_from_model(self.vc, model) for model in models]
        return list(filter(None, ents))

    async def gen_first(self) -> EntParent | None:
        session = get_session()
        result = await session.execute(self.query.limit(1))
        model = result.scalar_one_or_none()
        return await EntParent._gen_from_model(self.vc, model)

    async def genx_first(self) -> EntParent:
        ent = await self.gen_first()
        if not ent:
            raise EntNotFoundError("Expected query to return an ent, got None.")
        return ent


class EntParentCountQuery(EntParentQuery[int]):
    def __init__(self) -> None:
        self.query = select(func.count()).select_from(EntParentModel)

    async def gen_NO_PRIVACY(self) -> int:
        session = get_session()
        result = await session.execute(self.query)
        count = result.scalar()
        if count is None:
            raise ExecutionError("Unable to get the count")
        return count


class EntParentMutator:
    @classmethod
    def create(
        cls,
        vc: ExampleViewerContext,
        grand_parent_id: UUID,
        name: str,
        id: UUID | None = None,
        created_at: datetime | None = None,
    ) -> EntParentMutatorCreationAction:
        return EntParentMutatorCreationAction(
            vc=vc,
            id=id,
            created_at=created_at,
            grand_parent_id=grand_parent_id,
            name=name,
        )

    @classmethod
    def update(
        cls, vc: ExampleViewerContext, ent: EntParent
    ) -> EntParentMutatorUpdateAction:
        return EntParentMutatorUpdateAction(vc=vc, ent=ent)

    @classmethod
    def delete(
        cls, vc: ExampleViewerContext, ent: EntParent
    ) -> EntParentMutatorDeletionAction:
        return EntParentMutatorDeletionAction(vc=vc, ent=ent)


class EntParentMutatorCreationAction:
    vc: ExampleViewerContext
    id: UUID
    grand_parent_id: UUID
    name: str

    def __init__(
        self,
        vc: ExampleViewerContext,
        id: UUID | None,
        created_at: datetime | None,
        grand_parent_id: UUID,
        name: str,
    ) -> None:
        self.vc = vc
        self.created_at = created_at if created_at else datetime.now(tz=UTC)
        self.id = id if id else generate_uuid(EntParent, self.created_at)
        self.grand_parent_id = grand_parent_id
        self.name = name

    async def gen_savex(self) -> EntParent:
        session = get_session()
        model = EntParentModel(
            id=self.id,
            created_at=self.created_at,
            grand_parent_id=self.grand_parent_id,
            name=self.name,
        )
        session.add(model)
        await session.flush()
        # TODO privacy checks
        return await EntParent._genx_from_model(self.vc, model)


class EntParentMutatorUpdateAction:
    vc: ExampleViewerContext
    ent: EntParent
    id: UUID
    grand_parent_id: UUID
    name: str

    def __init__(self, vc: ExampleViewerContext, ent: EntParent) -> None:
        self.vc = vc
        self.ent = ent
        self.grand_parent_id = ent.grand_parent_id
        self.name = ent.name

    async def gen_savex(self) -> EntParent:
        session = get_session()
        model = self.ent.model
        model.grand_parent_id = self.grand_parent_id
        model.name = self.name
        session.add(model)
        await session.flush()
        # TODO privacy checks
        return await EntParent._genx_from_model(self.vc, model)


class EntParentMutatorDeletionAction:
    vc: ExampleViewerContext
    ent: EntParent

    def __init__(self, vc: ExampleViewerContext, ent: EntParent) -> None:
        self.vc = vc
        self.ent = ent

    async def gen_save(self) -> None:
        session = get_session()
        model = self.ent.model
        # TODO privacy checks
        await session.delete(model)
        await session.flush()


class EntParentExample:
    @classmethod
    async def gen_create(
        cls,
        vc: ExampleViewerContext,
        created_at: datetime | None = None,
        grand_parent_id: UUID | Sentinel = NOTHING,
        name: str | Sentinel = NOTHING,
    ) -> EntParent:
        # TODO make sure we only use this in test mode

        if isinstance(grand_parent_id, Sentinel) or grand_parent_id is None:
            grand_parent_id_ent = await EntGrandParentExample.gen_create(vc)
            grand_parent_id = grand_parent_id_ent.id
        name = "Vincent" if isinstance(name, Sentinel) else name

        return await EntParentMutator.create(
            vc=vc, created_at=created_at, grand_parent_id=grand_parent_id, name=name
        ).gen_savex()

    @classmethod
    def _get_field(cls, field_name: str) -> Field:
        schema = EntParentSchema()
        fields = schema.get_fields()
        field = list(
            filter(
                lambda field: field.name == field_name,
                fields,
            )
        )[0]
        if not field:
            raise ValueError(f"Unknown field: {field_name}")
        return field
