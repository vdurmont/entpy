####################
# Code generated by EntPy - do not modify manually!
####################

from __future__ import annotations
from entpy import Ent, generate_uuid, EntNotFoundError, ExecutionError, Action, Decision
from uuid import UUID
from datetime import datetime, UTC
from typing import Self
from abc import ABC
from evc import ExampleViewerContext
from database import get_session
from sqlalchemy import select, Select, func, Result
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy.dialects.postgresql import UUID as DBUUID
from sentinels import Sentinel  # type: ignore
from sqlalchemy.sql.expression import ColumnElement
from sqlalchemy import ForeignKey
from typing import TYPE_CHECKING
from typing import Any, TypeVar, Generic
from .ent_model import EntModel
from entpy import Field
from ent_test_object3_schema import EntTestObject3Schema

if TYPE_CHECKING:
    from .ent_test_object4 import EntTestObject4


class EntTestObject3Model(EntModel):
    __tablename__ = "test_object3"

    other_id: Mapped[UUID | None] = mapped_column(
        DBUUID(as_uuid=True), ForeignKey("test_object4.id"), nullable=True
    )


class EntTestObject3(Ent[ExampleViewerContext]):
    vc: ExampleViewerContext
    model: EntTestObject3Model

    def __init__(self, vc: ExampleViewerContext, model: EntTestObject3Model) -> None:
        self.vc = vc
        self.model = model

    @property
    def id(self) -> UUID:
        return self.model.id

    @property
    def created_at(self) -> datetime:
        return self.model.created_at

    @property
    def updated_at(self) -> datetime:
        return self.model.updated_at

    @property
    def other_id(self) -> UUID | None:
        return self.model.other_id

    async def gen_other(self) -> "EntTestObject4" | None:
        from .ent_test_object4 import EntTestObject4

        if self.model.other_id:
            return await EntTestObject4.gen(self.vc, self.model.other_id)
        return None

    async def _gen_evaluate_privacy(
        self, vc: ExampleViewerContext, action: Action
    ) -> Decision:
        rules = EntTestObject3Schema().get_privacy_rules(action)
        for rule in rules:
            decision = await rule.gen_evaluate(vc, self)
            # If we get an ALLOW or DENY, we return instantly. Else, we keep going.
            if decision != Decision.PASS:
                return decision
        # We default to denying
        return Decision.DENY

    @classmethod
    async def genx(cls, vc: ExampleViewerContext, ent_id: UUID) -> EntTestObject3:
        ent = await cls.gen(vc, ent_id)
        if not ent:
            raise EntNotFoundError(f"No EntTestObject3 found for ID {ent_id}")
        return ent

    @classmethod
    async def gen(cls, vc: ExampleViewerContext, ent_id: UUID) -> EntTestObject3 | None:
        session = get_session()
        model = await session.get(EntTestObject3Model, ent_id)
        return await cls._gen_from_model(vc, model)

    @classmethod
    async def _gen_from_model(
        cls, vc: ExampleViewerContext, model: EntTestObject3Model | None
    ) -> EntTestObject3 | None:
        if not model:
            return None
        ent = EntTestObject3(vc=vc, model=model)
        decision = await ent._gen_evaluate_privacy(vc=vc, action=Action.READ)
        return ent if decision == Decision.ALLOW else None

    @classmethod
    async def _genx_from_model(
        cls, vc: ExampleViewerContext, model: EntTestObject3Model
    ) -> EntTestObject3:
        ent = await EntTestObject3._gen_from_model(vc=vc, model=model)
        if not ent:
            raise EntNotFoundError(f"No EntTestObject3 found for ID {model.id}")
        return ent

    @classmethod
    def query(cls, vc: ExampleViewerContext) -> EntTestObject3ListQuery:
        return EntTestObject3ListQuery(vc=vc)

    @classmethod
    def query_count(cls, vc: ExampleViewerContext) -> EntTestObject3CountQuery:
        return EntTestObject3CountQuery()


T = TypeVar("T")


class EntTestObject3Query(ABC, Generic[T]):
    query: Select[tuple[T]]

    def join(self, model_class: type[EntModel], predicate: ColumnElement[bool]) -> Self:
        self.query = self.query.join(model_class, predicate)
        return self

    def where(self, predicate: ColumnElement[bool]) -> Self:
        self.query = self.query.where(predicate)
        return self

    def order_by(self, predicate: ColumnElement[Any]) -> Self:
        self.query = self.query.order_by(predicate)
        return self

    def limit(self, limit: int) -> Self:
        self.query = self.query.limit(limit)
        return self

    def offset(self, offset: int) -> Self:
        self.query = self.query.offset(offset)
        return self


class EntTestObject3ListQuery(EntTestObject3Query[EntTestObject3Model]):
    vc: ExampleViewerContext

    def __init__(self, vc: ExampleViewerContext) -> None:
        self.vc = vc

        self.query = select(EntTestObject3Model)

    async def gen(self) -> list[EntTestObject3]:
        session = get_session()
        result = await session.execute(self.query)
        ents = await self._gen_ents(result)
        return list(filter(None, ents))

    async def _gen_ents(
        self, result: Result[tuple[EntTestObject3Model]]
    ) -> list[EntTestObject3 | None]:
        models = result.scalars().all()
        return [
            await EntTestObject3._gen_from_model(self.vc, model) for model in models
        ]

    async def gen_first(self) -> EntTestObject3 | None:
        session = get_session()
        result = await session.execute(self.query.limit(1))
        return await self._gen_ent(result)

    async def _gen_ent(
        self, result: Result[tuple[EntTestObject3Model]]
    ) -> EntTestObject3 | None:
        model = result.scalar_one_or_none()
        return await EntTestObject3._gen_from_model(self.vc, model)

    async def genx_first(self) -> EntTestObject3:
        ent = await self.gen_first()
        if not ent:
            raise EntNotFoundError("Expected query to return an ent, got None.")
        return ent


class EntTestObject3CountQuery(EntTestObject3Query[int]):
    def __init__(self) -> None:
        self.query = select(func.count()).select_from(EntTestObject3Model)

    async def gen_NO_PRIVACY(self) -> int:
        session = get_session()
        result = await session.execute(self.query)
        count = result.scalar()
        if count is None:
            raise ExecutionError("Unable to get the count")
        return count


class EntTestObject3Mutator:
    @classmethod
    def create(
        cls,
        vc: ExampleViewerContext,
        other_id: UUID | None = None,
        id: UUID | None = None,
        created_at: datetime | None = None,
    ) -> EntTestObject3MutatorCreationAction:
        return EntTestObject3MutatorCreationAction(
            vc=vc, id=id, created_at=created_at, other_id=other_id
        )

    @classmethod
    def update(
        cls, vc: ExampleViewerContext, ent: EntTestObject3
    ) -> EntTestObject3MutatorUpdateAction:
        return EntTestObject3MutatorUpdateAction(vc=vc, ent=ent)

    @classmethod
    def delete(
        cls, vc: ExampleViewerContext, ent: EntTestObject3
    ) -> EntTestObject3MutatorDeletionAction:
        return EntTestObject3MutatorDeletionAction(vc=vc, ent=ent)


class EntTestObject3MutatorCreationAction:
    vc: ExampleViewerContext
    id: UUID
    other_id: UUID | None = None

    def __init__(
        self,
        vc: ExampleViewerContext,
        id: UUID | None,
        created_at: datetime | None,
        other_id: UUID | None,
    ) -> None:
        self.vc = vc
        self.created_at = created_at if created_at else datetime.now(tz=UTC)
        self.id = id if id else generate_uuid(EntTestObject3, self.created_at)
        self.other_id = other_id

    async def gen_savex(self) -> EntTestObject3:
        session = get_session()

        model = EntTestObject3Model(
            id=self.id,
            created_at=self.created_at,
            other_id=self.other_id,
        )
        session.add(model)
        await session.flush()
        # TODO privacy checks
        return await EntTestObject3._genx_from_model(self.vc, model)


class EntTestObject3MutatorUpdateAction:
    vc: ExampleViewerContext
    ent: EntTestObject3
    id: UUID
    other_id: UUID | None = None

    def __init__(self, vc: ExampleViewerContext, ent: EntTestObject3) -> None:
        self.vc = vc
        self.ent = ent
        self.other_id = ent.other_id

    async def gen_savex(self) -> EntTestObject3:
        session = get_session()

        model = self.ent.model
        model.other_id = self.other_id
        session.add(model)
        await session.flush()
        # TODO privacy checks
        return await EntTestObject3._genx_from_model(self.vc, model)


class EntTestObject3MutatorDeletionAction:
    vc: ExampleViewerContext
    ent: EntTestObject3

    def __init__(self, vc: ExampleViewerContext, ent: EntTestObject3) -> None:
        self.vc = vc
        self.ent = ent

    async def gen_save(self) -> None:
        session = get_session()
        model = self.ent.model
        # TODO privacy checks
        await session.delete(model)
        await session.flush()


class EntTestObject3Example:
    @classmethod
    async def gen_create(
        cls,
        vc: ExampleViewerContext,
        created_at: datetime | None = None,
        other_id: UUID | None = None,
    ) -> EntTestObject3:
        # TODO make sure we only use this in test mode

        if isinstance(other_id, Sentinel) or other_id is None:
            from .ent_test_object4 import EntTestObject4Example

            other_id_ent = await EntTestObject4Example.gen_create(vc)
            other_id = other_id_ent.id

        return await EntTestObject3Mutator.create(
            vc=vc, created_at=created_at, other_id=other_id
        ).gen_savex()


def _get_field(field_name: str) -> Field:
    schema = EntTestObject3Schema()
    fields = schema.get_fields()
    field = list(
        filter(
            lambda field: field.name == field_name,
            fields,
        )
    )[0]
    if not field:
        raise ValueError(f"Unknown field: {field_name}")
    return field
