####################
# Code generated by EntPy - do not modify manually!
####################

from __future__ import annotations
from entpy import Ent, generate_uuid, EntNotFoundError, ExecutionError, Action, Decision
from uuid import UUID
from datetime import datetime, UTC
from typing import Self
from abc import ABC
from evc import ExampleViewerContext
from database import get_session
from .ent_model import EntModel
from sqlalchemy import select, Select, func
from sentinels import NOTHING, Sentinel  # type: ignore
from typing import Any, TypeVar, Generic
from .ent_parent import EntParentExample
from sqlalchemy.dialects.postgresql import UUID as DBUUID
from sqlalchemy import ForeignKey
from entpy import Field
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy.sql.expression import ColumnElement
from sqlalchemy import String
from ent_child_schema import EntChildSchema
from .ent_parent import EntParent


class EntChildModel(EntModel):
    __tablename__ = "child"

    name: Mapped[str] = mapped_column(String(100), nullable=False)
    parent_id: Mapped[UUID] = mapped_column(
        DBUUID(as_uuid=True), ForeignKey("parent.id"), nullable=False
    )


class EntChild(Ent):
    vc: ExampleViewerContext
    model: EntChildModel

    def __init__(self, vc: ExampleViewerContext, model: EntChildModel) -> None:
        self.vc = vc
        self.model = model

    @property
    def id(self) -> UUID:
        return self.model.id

    @property
    def created_at(self) -> datetime:
        return self.model.created_at

    @property
    def updated_at(self) -> datetime:
        return self.model.updated_at

    @property
    def name(self) -> str:
        return self.model.name

    @property
    def parent_id(self) -> UUID:
        return self.model.parent_id

    async def gen_parent(self) -> EntParent:
        return await EntParent.genx(self.vc, self.model.parent_id)

    async def _gen_evaluate_privacy(
        self, vc: ExampleViewerContext, action: Action
    ) -> Decision:
        rules = EntChildSchema().get_privacy_rules(action)
        for rule in rules:
            decision = await rule.gen_evaluate(vc, self)
            # If we get an ALLOW or DENY, we return instantly. Else, we keep going.
            if decision != Decision.PASS:
                return decision
        # We default to denying
        return Decision.DENY

    @classmethod
    async def genx(cls, vc: ExampleViewerContext, ent_id: UUID) -> EntChild:
        ent = await cls.gen(vc, ent_id)
        if not ent:
            raise EntNotFoundError(f"No EntChild found for ID {ent_id}")
        return ent

    @classmethod
    async def gen(cls, vc: ExampleViewerContext, ent_id: UUID) -> EntChild | None:
        session = get_session()
        model = await session.get(EntChildModel, ent_id)
        return await cls._gen_from_model(vc, model)

    @classmethod
    async def _gen_from_model(
        cls, vc: ExampleViewerContext, model: EntChildModel | None
    ) -> EntChild | None:
        if not model:
            return None
        ent = EntChild(vc=vc, model=model)
        decision = await ent._gen_evaluate_privacy(vc=vc, action=Action.READ)
        return ent if decision == Decision.ALLOW else None

    @classmethod
    async def _genx_from_model(
        cls, vc: ExampleViewerContext, model: EntChildModel
    ) -> EntChild:
        ent = await EntChild._gen_from_model(vc=vc, model=model)
        if not ent:
            raise EntNotFoundError(f"No EntChild found for ID {model.id}")
        return ent

    @classmethod
    def query(cls, vc: ExampleViewerContext) -> EntChildListQuery:
        return EntChildListQuery(vc=vc)

    @classmethod
    def query_count(cls, vc: ExampleViewerContext) -> EntChildCountQuery:
        return EntChildCountQuery()


T = TypeVar("T")


class EntChildQuery(ABC, Generic[T]):
    query: Select[tuple[T]]

    def join(self, model_class: type[EntModel], predicate: ColumnElement[bool]) -> Self:
        self.query = self.query.join(model_class, predicate)
        return self

    def where(self, predicate: ColumnElement[bool]) -> Self:
        self.query = self.query.where(predicate)
        return self

    def order_by(self, predicate: ColumnElement[Any]) -> Self:
        self.query = self.query.order_by(predicate)
        return self

    def limit(self, limit: int) -> Self:
        self.query = self.query.limit(limit)
        return self


class EntChildListQuery(EntChildQuery[EntChildModel]):
    vc: ExampleViewerContext

    def __init__(self, vc: ExampleViewerContext) -> None:
        self.vc = vc
        self.query = select(EntChildModel)

    async def gen(self) -> list[EntChild]:
        session = get_session()
        result = await session.execute(self.query)
        models = result.scalars().all()
        ents = [await EntChild._gen_from_model(self.vc, model) for model in models]
        return list(filter(None, ents))

    async def gen_first(self) -> EntChild | None:
        session = get_session()
        result = await session.execute(self.query.limit(1))
        model = result.scalar_one_or_none()
        return await EntChild._gen_from_model(self.vc, model)

    async def genx_first(self) -> EntChild:
        ent = await self.gen_first()
        if not ent:
            raise EntNotFoundError("Expected query to return an ent, got None.")
        return ent


class EntChildCountQuery(EntChildQuery[int]):
    def __init__(self) -> None:
        self.query = select(func.count()).select_from(EntChildModel)

    async def gen_NO_PRIVACY(self) -> int:
        session = get_session()
        result = await session.execute(self.query)
        count = result.scalar()
        if count is None:
            raise ExecutionError("Unable to get the count")
        return count


class EntChildMutator:
    @classmethod
    def create(
        cls,
        vc: ExampleViewerContext,
        name: str,
        parent_id: UUID,
        id: UUID | None = None,
        created_at: datetime | None = None,
    ) -> EntChildMutatorCreationAction:
        return EntChildMutatorCreationAction(
            vc=vc, id=id, created_at=created_at, name=name, parent_id=parent_id
        )

    @classmethod
    def update(
        cls, vc: ExampleViewerContext, ent: EntChild
    ) -> EntChildMutatorUpdateAction:
        return EntChildMutatorUpdateAction(vc=vc, ent=ent)

    @classmethod
    def delete(
        cls, vc: ExampleViewerContext, ent: EntChild
    ) -> EntChildMutatorDeletionAction:
        return EntChildMutatorDeletionAction(vc=vc, ent=ent)


class EntChildMutatorCreationAction:
    vc: ExampleViewerContext
    id: UUID
    name: str
    parent_id: UUID

    def __init__(
        self,
        vc: ExampleViewerContext,
        id: UUID | None,
        created_at: datetime | None,
        name: str,
        parent_id: UUID,
    ) -> None:
        self.vc = vc
        self.created_at = created_at if created_at else datetime.now(tz=UTC)
        self.id = id if id else generate_uuid(EntChild, self.created_at)
        self.name = name
        self.parent_id = parent_id

    async def gen_savex(self) -> EntChild:
        session = get_session()
        model = EntChildModel(
            id=self.id,
            created_at=self.created_at,
            name=self.name,
            parent_id=self.parent_id,
        )
        session.add(model)
        await session.flush()
        # TODO privacy checks
        return await EntChild._genx_from_model(self.vc, model)


class EntChildMutatorUpdateAction:
    vc: ExampleViewerContext
    ent: EntChild
    id: UUID
    name: str
    parent_id: UUID

    def __init__(self, vc: ExampleViewerContext, ent: EntChild) -> None:
        self.vc = vc
        self.ent = ent
        self.name = ent.name
        self.parent_id = ent.parent_id

    async def gen_savex(self) -> EntChild:
        session = get_session()
        model = self.ent.model
        model.name = self.name
        model.parent_id = self.parent_id
        session.add(model)
        await session.flush()
        # TODO privacy checks
        return await EntChild._genx_from_model(self.vc, model)


class EntChildMutatorDeletionAction:
    vc: ExampleViewerContext
    ent: EntChild

    def __init__(self, vc: ExampleViewerContext, ent: EntChild) -> None:
        self.vc = vc
        self.ent = ent

    async def gen_save(self) -> None:
        session = get_session()
        model = self.ent.model
        # TODO privacy checks
        await session.delete(model)
        await session.flush()


class EntChildExample:
    @classmethod
    async def gen_create(
        cls,
        vc: ExampleViewerContext,
        created_at: datetime | None = None,
        name: str | Sentinel = NOTHING,
        parent_id: UUID | Sentinel = NOTHING,
    ) -> EntChild:
        # TODO make sure we only use this in test mode

        name = "Benjamin" if isinstance(name, Sentinel) else name

        if isinstance(parent_id, Sentinel) or parent_id is None:
            parent_id_ent = await EntParentExample.gen_create(vc)
            parent_id = parent_id_ent.id

        return await EntChildMutator.create(
            vc=vc, created_at=created_at, name=name, parent_id=parent_id
        ).gen_savex()

    @classmethod
    def _get_field(cls, field_name: str) -> Field:
        schema = EntChildSchema()
        fields = schema.get_fields()
        field = list(
            filter(
                lambda field: field.name == field_name,
                fields,
            )
        )[0]
        if not field:
            raise ValueError(f"Unknown field: {field_name}")
        return field
