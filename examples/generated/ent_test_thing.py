####################
# Code generated by EntPy - do not modify manually!
####################

from __future__ import annotations
from abc import abstractmethod
from uuid import UUID
from entpy import Ent
from datetime import datetime
from sentinels import Sentinel, NOTHING  # type: ignore
from evc import ExampleViewerContext


class IEntTestThing(Ent):
    @property
    @abstractmethod
    def a_good_thing(self) -> str:
        pass

    @classmethod
    async def gen(cls, vc: ExampleViewerContext, ent_id: UUID) -> IEntTestThing | None:
        # TODO refactor this to read the bytes from the UUID

        from .ent_test_object import EntTestObject

        ent_test_object = await EntTestObject.gen(vc, ent_id)
        if ent_test_object:
            return ent_test_object

        return None

    @classmethod
    async def genx(cls, vc: ExampleViewerContext, ent_id: UUID) -> IEntTestThing:
        # TODO refactor this to read the bytes from the UUID

        from .ent_test_object import EntTestObject

        ent_test_object = await EntTestObject.genx(vc, ent_id)
        if ent_test_object:
            return ent_test_object

        raise ValueError(f"No EntTestThing found for ID {ent_id}")


class IEntTestThingExample:
    @classmethod
    async def gen_create(
        cls,
        vc: ExampleViewerContext,
        created_at: datetime | None = None,
        a_good_thing: str | Sentinel = NOTHING,
    ) -> IEntTestThing:
        # TODO make sure we only use this in test mode

        # EntPy selected a random implementation of the pattern to use for examples
        from .ent_test_object import EntTestObjectExample

        return await EntTestObjectExample.gen_create(vc=vc, created_at=created_at)
